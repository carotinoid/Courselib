#!/usr/bin/env python3
from pwn import *
from typing import Generator, List

# Settings
PHASE1_HOST = "localhost"
PHASE1_PORT = 10003
PHASE2_PROCESS = "/home/csed415-lab03/target"
context.log_level = "warn"

### Given functions (adjusted) ###
def PRGA(S: List[int]) -> int:
    i = 0
    j = 0
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]
        K = S[j]
        yield K

def RC4(S: list) -> Generator[int, None, None]:
    K = PRGA(S)
    return K

def encrypt(keystream: Generator[int, None, None], plaintext: str) -> str:
    ciphertext = [chr(ord(ch) ^ next(keystream)) for ch in list(plaintext)]
    hex_ciphertext = ''.join("{:02X}".format(ord(ch)) for ch in ciphertext)
    return hex_ciphertext

### Revesre computation of encrypt() ###
def decrypt(keystream: Generator[int, None, None], hex_ciphertext: str) -> str:
    print(f"[@] Decrypting : {hex_ciphertext} ...")
    ciphertext = ""
    for seg in [hex_ciphertext[i:i+2] for i in range(0, len(hex_ciphertext), 2)]:
        ciphertext = ciphertext + chr(int(seg, 16))
    plaintext_list = [chr(ord(ch) ^ next(keystream)) for ch in (ciphertext)]
    plaintext = ''.join(c for c in plaintext_list)
    print(f"[@] Decrypting done! : {plaintext}")
    return plaintext

### Phase 1 target class ###
class phase1_target:
    def __init__(self):
        self.p = remote(PHASE1_HOST, PHASE1_PORT)
        print("[~] Connected to the target: server.py.")
        self.menu = self.p.recvuntil(b">>> ")
    def __del__(self):
        print("[~] Closing the connection: server.py.")
        self.p.close()
    def encrypter(self, data: str) -> str:  # choice 1
        self.p.sendline(b"1")
        self.p.recvline()
        self.p.sendline(data)
        e = self.p.recvline()
        self.p.recvuntil(b">>> ")
        return e
    def encrypted_key(self) -> str:         # choice 2
        self.p.sendline(b"2")
        self.p.recvline()
        e = self.p.recvline()
        self.p.recvuntil(b">>> ")
        return e

### Phase 1 decryption ###
def decrypt_key() -> str:
    ### Initial setup ###
    print(f"[~] Generating process ...")
    p = phase1_target()
    S = [-1 for _ in range(256)]
    swap_history = []
    idx, i, j = 0, 0, 0

    ### Restore original S ###
    print("[~] Restoring original S ...")
    while True:
        idx = idx + 1
        mi = i = (i + 1) % 256
        response = ord("A") ^ int(p.encrypter(b"A").decode().strip(), 16)
        j = (j + response) % 256
        for a, b in swap_history:
            if mi in (a, b):
                mi = b if mi == a else a
        S[mi] = response
        swap_history.insert(0, (i, j))
        # print(f"[~] idx: {idx}, S[{mi}] = {response}, swap: {i}, {j}")
        if -1 not in S:
            print("[!] Original S is restored: ")
            print(S)
            break
    if (len(list(set(S))) != 256):
        print(f"[!] Duplicates detected. {256 - len(set(S))}")  
        exit(1)

    ### Generate keystream ###
    print("[~] Generating keystream ...")
    keystream = RC4(S)
    print("[~] Mimicking ...")
    encrypt(keystream, ''.join("A" for _ in range(idx)))

    ### Decrypt key ###
    encrypted_key = p.encrypted_key()
    print(f"[~] Encrypted key: {encrypted_key}")
    key = decrypt(keystream, encrypted_key.decode().strip())
    print(f"[!] Decrypted key: {key}")

    return key

### Phase 2 target class ###
class phase2_target:
    def __init__(self, key: str):
        self.p = process(PHASE2_PROCESS)
        print("[~] Connected to the target: target.")
        self.p.recvline()
        self.p.sendline(key.encode())
        self.p.recvuntil(b"<enter>")
        self.p.recvline()
        self.p.recvline()

    def __del__(self):
        print("[~] Closing the connection: target.")
        self.p.close

    def send(self, data):
        self.p.sendline(data)
        self.p.recvuntil(b"(-1 point)")
        self.p.recvline()

    def get_flag(self):
        self.p.sendline(b"w")
        self.p.sendline(b"s")
        self.p.recvuntil(b"This is your flag:")
        print(self.p.recvall().decode().strip())

### Phase 2 flag ###
def flag(key):
    print(f"[~] Generating process ...")
    p = phase2_target(key)
    print(f"[~] Making score be negative ...")
    for _ in range(200):
        p.send(b"1")
    print(f"[!] Flag found ...")
    p.get_flag()

def main():
    key = decrypt_key() # key: e933a52be418ef6c160152d4a7581efeee51eb25ae2452cd0deec507cc957a65
    print()
    flag(key)

if __name__ == "__main__":
    main()